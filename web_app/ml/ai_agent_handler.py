from smolagents import CodeAgent, tool
from test_run_handler import run_function_tests
from output_analyzer_handler import parse_test_results
from typing import Dict, Any
from openai import OpenAI
import yaml
import re
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ smolagents
logging.getLogger("smolagents").setLevel(logging.ERROR)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
@tool
def generate_unit_tests_from_code(code: str, errors: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞ –Ω–∞ Python.

        Args:
            code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏.
            errors: –û—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å).

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–¥–æ–º —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Code: ```py ... <end_code>`.
    """
    if errors:
        return f"""\
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏:
```python
{code}
```
–û—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:
{errors}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ unittest. –í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Code:
```py
import unittest
...
```
<end_code>
"""
    return f"""\
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏:
```python
{code}
```
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ, —á–∏—Å—Ç—ã–µ –∏ —á–∏—Ç–∞–µ–º—ã–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ unittest.
–í–∫–ª—é—á–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤. –í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Code:
```py
import unittest
...
```
<end_code>
"""

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@tool
def final_answer(short_outcome: str, detailed_outcome: str, context: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏.

        Args:
            short_outcome: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
            detailed_outcome: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å).

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º.
    """
    return f"""\
### 1. Task outcome (short version):
{short_outcome}
### 2. Task outcome (extremely detailed version):
{detailed_outcome}
### 3. Additional context (if relevant):
{context}
"""

class ChatMessage:
    def __init__(self, content: str):
        self.content = content

class CustomOllamaModel:
    def __init__(self, base_url: str = "http://localhost:11434/v1", model: str = "llama3.1"):
        self.client = OpenAI(base_url=base_url, api_key="ollama")
        self.model = model

    def __call__(self, messages, **kwargs):
        supported_kwargs = {k: v for k, v in kwargs.items() if k in ["temperature", "max_tokens", "top_p"]}
        supported_kwargs["max_tokens"] = 2048  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        response = self.client.chat.completions.create(
            model=self.model,
            messages=messages,
            **supported_kwargs
        )
        return ChatMessage(content=response.choices[0].message.content)

def extract_code_from_response(response: str) -> str:
    match = re.search(r'Code:\s*```py\n(.*?)\n```<end_code>', response, re.DOTALL)
    if match:
        return match.group(1).strip()
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –º—É—Å–æ—Ä
    return ""

def print_test_results(parsed_result: Dict[str, Any]):
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {parsed_result['total_tests']}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {len(parsed_result['passed_tests'])}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(parsed_result['failed_tests'])}")
    if parsed_result['failed_tests']:
        print("\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for test in parsed_result['failed_tests']:
            print(f"- {test['test_name']}:\n{test['traceback']}\n")
    if parsed_result['success']:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")

def fix_function_with_ai(parsed_results: Dict[str, Any], original_code: str, test_code: str = None, max_attempts: int = 3) -> Dict[str, Any]:
    current_code = original_code.strip()
    generated_test_code = test_code

    # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    with open("prompts.yaml", 'r') as stream:
        prompt_templates = yaml.safe_load(stream)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    model = CustomOllamaModel(base_url="http://localhost:11434/v1", model="llama3.1")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent = CodeAgent(
        tools=[generate_unit_tests_from_code, final_answer],
        model=model,
        max_steps=6,
        prompt_templates=prompt_templates,
        additional_authorized_imports=['unittest', 'sys']
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if not generated_test_code:
        print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤...")
        test_prompt = generate_unit_tests_from_code(current_code)
        generated_test_code = extract_code_from_response(agent(test_prompt))
        if not generated_test_code:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return {
                "fixed_code": current_code,
                "generated_tests": "",
                "iterations": 0,
                "final_result": {"success": False, "error": "Invalid test code format"},
                "agent_response": "Failed to generate tests"
            }
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n{generated_test_code}")

    for attempt in range(max_attempts):
        print(f"\nü§ñ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_result = run_function_tests(current_code, generated_test_code, language="python")
        parsed_result = parse_test_results(test_result)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        print_test_results(parsed_result)

        if parsed_result["success"]:
            print("‚úÖ –£—Å–ø–µ—Ö!")
            final_result = agent(final_answer(
                short_outcome="–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã.",
                detailed_outcome=f"–§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ {attempt + 1} –ø–æ–ø—ã—Ç–æ–∫.\n–ö–æ–¥:\n```python\n{current_code}\n```\n–¢–µ—Å—Ç—ã:\n```python\n{generated_test_code}\n```",
                context="–¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏."
            ))
            return {
                "fixed_code": current_code,
                "generated_tests": generated_test_code,
                "iterations": attempt + 1,
                "final_result": parsed_result,
                "agent_response": final_result
            }

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
        failed_tests_info = "\n".join(
            f"–¢–µ—Å—Ç: {t['test_name']}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{t['traceback']}\n"
            for t in parsed_result.get("failed_tests", [])
        ) or "–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫."

        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
        fix_prompt = f"""\
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏:
```python
{current_code}
```
–ö–æ–¥ —Ç–µ—Å—Ç–æ–≤:
```python
{generated_test_code}
```
–û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤:
{failed_tests_info}

–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Code:
```py
def add(a, b):
    ...
```
<end_code>
"""
        new_code = extract_code_from_response(agent(fix_prompt))
        if not new_code:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            continue
        current_code = new_code
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:\n{current_code}")

        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
        print("ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤...")
        test_prompt = generate_unit_tests_from_code(current_code, failed_tests_info)
        new_test_code = extract_code_from_response(agent(test_prompt))
        if not new_test_code:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            continue
        generated_test_code = new_test_code
        print(f"–ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã:\n{generated_test_code}")

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
    final_result = agent(final_answer(
        short_outcome="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã.",
        detailed_outcome=f"–ü–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥:\n```python\n{current_code}\n```\n–¢–µ—Å—Ç—ã:\n```python\n{generated_test_code}\n```",
        context="–ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏."
    ))
    return {
        "fixed_code": current_code,
        "generated_tests": generated_test_code,
        "iterations": max_attempts,
        "final_result": parsed_result,
        "agent_response": final_result
    }